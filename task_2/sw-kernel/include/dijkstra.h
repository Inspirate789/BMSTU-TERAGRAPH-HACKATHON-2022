#ifndef DIJKSTRA_H_
#define DIJKSTRA_H_

#include "lnh64.hxx"
#include "graph_iterators.hxx"
#include "graph_layouts.h"
#include "graph_communities.h"
#include "graph_vizualization.h"


extern lnh lnh_core;
extern global_memory_io gmio;


//Номера структур данных SPE
enum Structures : uint32_t {
    null            = 0,   //Нулевая структура не используется
    main_graph      = 1,   //Граф
    vertex_queue        = 2,   //Очередь вершин
    vizualization_graph = 3,   //Граф визуализации
    communities     = 4,   //Структура сообществ
    modularity_queue    = 5,   //Очередь модулярности
    modularity_queue_idx    = 6,   //Индексы очереди модулярности
    communities_tree    = 7   //Структура вдоичного дерева для визуализации сообществ
};

constexpr Graph G(Structures::main_graph);
constexpr Queue Q(Structures::vertex_queue);
constexpr Community cG(Structures::communities, G);
constexpr Graph vG(Structures::vizualization_graph);
constexpr cTree cT(Structures::communities_tree);
constexpr mQueue mQ(Structures::modularity_queue);
constexpr iQueue iQ(Structures::modularity_queue_idx);



//-------------------------------------------------------------
// Удаление графа
//-------------------------------------------------------------

void delete_graph();

//-------------------------------------------------------------
// Удаление визуализации графа
//-------------------------------------------------------------

void delete_visualization();


//-------------------------------------------------------------
// Создание визуализации графа в виде решетки 20x20
//-------------------------------------------------------------

void create_visualization();


//------------------------------------------------------------------------------
// Создание визуализации графа на основе обхода матрицы
//------------------------------------------------------------------------------

void create_centrality_visualization();

//------------------------------------------------------------------------------
// Создание визуализации графа на основе обхода по спирали центральности
//------------------------------------------------------------------------------

void create_centrality_spiral_visualization();


//------------------------------------------------------------------------------
// Выделение сильно связанных сообществ на основе модулярности
//------------------------------------------------------------------------------

void create_communities_forced_vizualization();

//------------------------------------------------------------------------------
// Выделение сильно связанных сообществ на основе модулярности
//------------------------------------------------------------------------------

void create_communities_forest_vizualization();

//-------------------------------------------------------------
// Получение информации о вершине
//-------------------------------------------------------------

void get_vertex_data ();

//-------------------------------------------------------------
// Получение информации о первой вершине
//-------------------------------------------------------------

void get_first_vertex ();

//-------------------------------------------------------------
// Получение информации о следующей вершине
//-------------------------------------------------------------

void get_next_vertex ();


//-------------------------------------------------------------
// Изменение атрибутов визуализации графа
//-------------------------------------------------------------

void set_visualization_attributes ();

//-------------------------------------------------------------
// Создание случайного графа
//-------------------------------------------------------------

void insert_edges ();


//-------------------------------------------------------------
// Алгоритм Дейкстры
//-------------------------------------------------------------

void dijkstra_core(unsigned int start_vertex);

void dijkstra ();

//-------------------------------------------------------------
// Центральность
//-------------------------------------------------------------

void btwc ();

#endif	

